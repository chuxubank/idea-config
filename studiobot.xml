<application>
  <component name="StudioBotSettings">
    <option name="contextSharingModeV2" value="AlwaysShare" />
    <option name="onboardedVersion" value="3" />
    <option name="queryHistory">
      <list>
        <historyEntry timestamp="1728889138205">Hello</historyEntry>
        <historyEntry timestamp="1728889077341">Hello</historyEntry>
        <historyEntry timestamp="1728888728957">Hello</historyEntry>
        <historyEntry timestamp="1728632394919">fun List&lt;FirmwareUpdateInfo&gt;.isUpgrading() = any { it.status == FirmwareStatus.UPGRADING }

How to use it in java</historyEntry>
        <historyEntry timestamp="1728546779255">runCatching {
            withTimeout(FIRMWARE_UPDATE_EACH_CHIP_DURATION * initialUpdateNeededChipInfoList.size) {
                supervisorScope {
                    select {
                        async {
                            remoteDeviceRepository.waitOtaComplete(lock).first()
                        }.onAwait { result -&gt;
                            LOG.debug(&quot;Get ota result from mqtt: {}&quot;, result)
                            initialUpdateNeededChipInfoList.filter { initial -&gt;
                                result.chips.find { it.chip == initial.chip }?.status == FirmwareUpdateStatus.FAILED
                            }
                        }
                        async {
                            coRetry(
                                maxAttempts = Int.MAX_VALUE,
                                delayMs = FIRMWARE_UPDATE_POLL_INTERVAL.inWholeMilliseconds,
                                input = Unit,
                                producer = {
                                    updateFirmwareInfoState(lock)
                                    getCurrentFirmwareInfoList()
                                },
                                retryWhen = { _, result -&gt;
                                    result.any { it.status == FirmwareStatus.UPGRADING }
                                },
                            )
                        }.onAwait { result -&gt;
                            LOG.debug(&quot;Get ota result from poll: {}&quot;, result)
                            getFailedChipInfoList(initialUpdateNeededChipInfoList, result)
                        }
                    }
                }
            }
        }.fold(
            onFailure = {
                LOG.error(&quot;Failed to get firmware update result, maybe timeout&quot;, it)
                checkFinalUpdateResult(
                    isRemote = true,
                    lock = lock,
                )
            },
            onSuccess = {
                onLockFirmwareUpdateComplete(
                    isRemote = true,
                    lockId = lock.id,
                    failedChipList = it,
                )
            },
        )

runCatching {
            withTimeout(FIRMWARE_UPDATE_EACH_CHIP_DURATION * initialUpdateNeededChipInfoList.size) {
                supervisorScope {
                    select {
                        async {
                            remoteDeviceRepository.waitOtaComplete(lock).first()
                        }.onAwait { result -&gt;
                            LOG.debug(&quot;Get ota result from mqtt: {}&quot;, result)
                            initialUpdateNeededChipInfoList.filter { initial -&gt;
                                result.chips.find { it.chip == initial.chip }?.status == FirmwareUpdateStatus.FAILED
                            }
                        }
                        async {
                            coRetry(
                                maxAttempts = Int.MAX_VALUE,
                                delayMs = FIRMWARE_UPDATE_POLL_INTERVAL.inWholeMilliseconds,
                                input = Unit,
                                producer = {
                                    updateFirmwareInfoState(lock)
                                    getCurrentFirmwareInfoList()
                                },
                                retryWhen = { _, result -&gt;
                                    result.any { it.status == FirmwareStatus.UPGRADING }
                                },
                            )
                        }.onAwait { result -&gt;
                            LOG.debug(&quot;Get ota result from poll: {}&quot;, result)
                            getFailedChipInfoList(initialUpdateNeededChipInfoList, result)
                        }
                    }
                }
            }
        }.fold(
            onFailure = {
                LOG.error(&quot;Failed to get firmware update result, maybe timeout&quot;, it)
                checkFinalUpdateResult(
                    isRemote = true,
                    lock = lock,
                )
            },
            onSuccess = {
                onLockFirmwareUpdateComplete(
                    isRemote = true,
                    lockId = lock.id,
                    failedChipList = it,
                )
            },
        )

&quot;Get ota result from poll:&quot; print but not call onSuccess</historyEntry>
      </list>
    </option>
  </component>
</application>